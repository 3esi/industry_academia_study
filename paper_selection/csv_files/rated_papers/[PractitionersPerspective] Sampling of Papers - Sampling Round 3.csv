Domain,Knowledge-seeking vs. Eval,Nerd factor/zu spezifisch,Validation Nerd Factor,Higher-level RQ,Distinguished,Bucket ID,Paper Name,Research Questions (max. 4),Notiz,Suitability Tendenz,Authors,URL
"AI and software engineering, Auto-coding",Evaluation,0,-1,,TRUE,-,LExecutor: Learning-Guided Execution,"RQ1:Howaccurateistheneuralmodelatpredictingrealistic runtimevalues? 
•RQ2:HowmuchcodedoesanexecutionguidedbyLExecutor cover,andhowdoesthecoveragecomparetoalternative waysofexecutingthecode? 
•RQ3:Howeffcientis“lexecuting”code? 
•RQ4:Asanapplicationoftheapproach,canweuseLExecutortoidentifysemantics-changingcommits?",,,"Beatriz Souza, Michael Pradel",No URL available
"AI and software engineering, Auto-coding",,,,,TRUE,-,Improving the Learning of Code Review Successive Tasks with Cross-Task Knowledge Distillation,,bereits gelabelt,,"Oussama Ben Sghaier, Houari Sahraoui",No URL available
"AI and software engineering, Auto-coding",,,,,TRUE,-,Benchmarking Robustness of AI-enabled Multi-sensor Fusion Systems: Challenges and Opportunities,,bereits gelabelt,,"Xinyu Gao, Zhijie Wang, Yang Feng, Lei Ma, Zhenyu Chen, Baowen Xu",No URL available
"AI and software engineering, Auto-coding",Evaluation,0,1,,FALSE,-,Compressing Pre-trained Models of Code into 3 MB,"RQ1: Can Compressor result in small accuracy loss when extremely compressing the pre-trained models? 
• RQ2: How much efficiency improvement can the compressed models obtain? 
• RQ3:HowfastisCompressor incompressingpre-trainedmodels?",,,"Jieke Shi, Zhou Yang, Bowen Xu, Hong Jin Kang, David Lo",No URL available
"AI and software engineering, Auto-coding",Evaluation,0,0,,FALSE,B2,PyEvolve: Automating Frequent Code Changes in Python ML Systems,"RQ1. What is the effectiveness of PYEVOLVE in generating correct code transformations? We conduct crossvalidation to determine that PYEVOLVE correctly transforms
code by replicating real-world CPATs. We report PYEVOLVE’s
overall effectiveness by its precision and recall.
RQ2. What is the contribution of data- and control- flow
aware rule inference to overall effectiveness? To perform
this analysis, we report the number of changes that would be
impossible to perform without the features in PYEVOLVE.
RQ3. How do developers find PYEVOLVE’s changes useful? To answer this, we submit pull requests to open-source
projects containing patches generated by PYEVOLVE and
record the developers’ responses.",,,"Malinda Dilhara, Danny Dig, Ameya Ketkar",No URL available
"AI and software engineering, Auto-coding",Evaluation,0,0,,FALSE,B2,[Remote] CodeMark: Imperceptible Watermarking for Code Datasets against Neural Code Completion Models,"RQ1: How is the model accuracy affected after being watermarked by CodeMark? 
• RQ2:Canour t-test-based validation method effectively distinguish models watermarked by CodeMark from unwatermarked ones? 
• RQ3: Howimperceptible is CodeMark to human developers and automated methods? 
• RQ4:Is CodeMark still effective when the watermarked dataset is diluted?",,,"Zhensu Sun, Xiaoning Du, Fu Song, Li Li",No URL available
Testing and analysis,Evaluation,0,1,,TRUE,-,Baldur: Whole-Proof Generation and Repair with Large Language Models,"RQ1: Howeffective are LLMs at generating whole proofs? LLMs outperform small-model-driven search-based methods. Baldur (without repair) is able to generate whole proofs for 47.9% of the theorems completely automatically, whereas search-based approaches prove 39.0% [37]. 
RQ2: Can LLMs be used to repair proofs? LLMscanrepairproofs, including their own erroneous proof attempts. Baldur proves an additional 1.5% of the theorems when given access to a previous erroneous proof attempt and the error messages produced by the proof assistant, even when controlling for the computational cost of the additional inference. The error message is crucial for this improvement. 
RQ3: Can LLMs benefit from using the context of the theorem? In-context learning is remarkably effective for LLMbased theoremproving.Withcontext, Baldur proves 47.5% of the theorems, but only 40.7% without context for the same model size. 
RQ4: DoesthesizeoftheLLMaffectproofsynthesiseffectiveness? Larger LLMs do perform better, suggesting that our approach will continue to improve with further developments in LLM research.",,,"Emily First, Markus Rabe, Talia Ringer, Yuriy Brun",No URL available
Testing and analysis,Knowledge-seeking,0,0,,TRUE,B3,Understanding and Detecting On-the-Fly Configuration Bugs,"RQ1: What are the common symptoms of OCBugs? 
 RQ2: What are the root causes of OCBugs?
RQ3: What are the triggering conditions of OCBugs?
bzw. (aus den oberen RQs wurde ein Tool entiwckelt und mit den folgenden RQs untersucht)
• RQ1: How effective is PARACHUTE in detecting
known OCBugs? This question examines the recall of
PARACHUTE by calculating the percentage of bugs that
can be detected among all known bugs.
• RQ2: How effective is PARACHUTE in detecting unknown OCBugs? This question evaluates the precision
of PARACHUTE by calculating the percentage of true
positives among all reported bugs.
• RQ3: Can PARACHUTE outperform the state-of-the-art
tool for detecting configuration update bugs? This question compares PARACHUTE with Staccato, the most related work for detecting OCBugs.",,,"Teng Wang, Zhouyang Jia, Shanshan Li, Si Zheng, Yue Yu, Erci Xu, Shaoliang Peng, Liao Xiangke",No URL available
Testing and analysis,Evaluation,-1,1,,TRUE,-,ProveNFix: Temporal Property guided Program Repair,"RQ1: What is the effectiveness and efficiency of ProveNFix compared to Infer? 
• RQ2: What is the performance of ProveNFix in fixing memory usage bugs compared to SAVER, and fixing resource leaks compared to FootPatch? 
• RQ3:CanProveNFixautomaticallyfind/fixgeneralizedtemporalbugs,suchasuncheckedreturn values and properties involving execution orders, that prior works either cannot find or fix? 
• RQ4:Is it practical to use ProveNFix as a specification inference tool to find desirable behaviors of internet-facing protocol implementations?",,,"Yahui Song, Xiang Gao, Wenhua Li, Wei-Ngan Chin, Abhik Roychoudhury",No URL available
Testing and analysis,Evaluation,0,0,,FALSE,B4,PyTy: Repairing Static Type Errors in Python,"RQ1 Howeffective is our automated data gathering at producing minimal code changes that fix type errors? 
RQ2 Howeffective is PyTy at fixing type errors? 
RQ3 Howdovariants of PyTy compare to the full approach? 
RQ4 Howdoes PyTy compare to state-of-the-art APR techniques?",,,"Yiu Wai Chow, Luca Di Grazia, Michael Pradel",No URL available
Testing and analysis,,,,,FALSE,-,MuAkka: Mutation Testing for Actor Concurrency in Akka Using Real-World Bugs,kleine RQ definiert,,,"Mohsen Moradi Moghadam, Mehdi Bagherzadeh, Raffi Khatchadourian, Hamid Bagheri",No URL available
Testing and analysis,Evaluation,0,0,,FALSE,B4,HTFuzz: Heap Operation Sequence Sensitive Fuzzing,"RQ1.IsHTFuzzeffectiveatfindingreal-worldHT-Vuls? 
RQ2.HowwelldotheimprovementsmadebyHTFuzzcontribute totheefficiencyoffuzzingtowardsHT-Vuls? 
RQ3.HowdoesHTFuzzcomparetootherfuzzers? ",,,"Yuanping Yu, Xiangkun Jia, Yuwei Liu, Yanhao Wang, Qian Sang, Chao Zhang, Purui Su",No URL available
Analytics,,,,,TRUE,-,Generative Type Inference for Python,,bereits gelabelt,,"Yun Peng, Chaozheng Wang, Wenxuan Wang, Cuiyun Gao, Michael Lyu",No URL available
Analytics,,,,,TRUE,-,FAIR: Flow Type-Aware Pre-Training of Compiler Intermediate Representations,,bereits gelabelt,,"Changan Niu, Chuanyi Li, Vincent Ng, David Lo, Bin Luo",No URL available
Analytics,Evaluation,0,0,,TRUE,B6,Recommending Analogical APIs via Knowledge Graph Embedding,"RQ1(Effectivenesswithtargetlibraries): How does KGE4AR compare to existing documentation-based techniques when recommending analogical API methods with given target libraries? 
• RQ2(Effectivenesswithouttargetlibraries):HowdoesKGE4ARcompare to existing documentation-based techniques when recommending analogical API methods without given target libraries? 
• RQ3(ImpactAnalysis):HowdodifferentcomponentsinKGE4AR(i.e., the KG embedding models, knowledge types, and similarity types and weights) impact the effectiveness of KGE4AR? 
• RQ4(Scalability): How scalable is KGE4AR with the increasing number of libraries?",,,"Mingwei Liu, Yanjun Yang, Yiling Lou, Xin Peng, Zhong Zhou, Xueying Du, Tianyong Yang",No URL available
Analytics,,,,,FALSE,-,On the Usage of Continual Learning for Out-of-Distribution Generalization in Pre-trained Language Models of Code,keine RQs klar definiert,,,"Martin Weyssow, Xin Zhou, Kisub Kim, David Lo, Houari Sahraoui",No URL available
Analytics,Evaluation,0,0,,FALSE,B6,Studying and Understanding the Tradeoffs Between Generality and Reduction in Software Debloating,"RQ1:Howdotheapproaches considered compare in terms of reduction, c-generality, and their tradeoff? 
• RQ2:Howdotheapproaches considered compare in terms of reduction, r-generality, and their tradeoff? 
• RQ3: How do the approaches considered perform when an increasing amount of inputs is used for debloating? 
• RQ4:Howefficient are the approaches?",,,"Qi Xin, Qirun Zhang, Alessandro Orso",No URL available
Analytics,Evaluation,-1,1,,FALSE,-,Decomposing Software Verification Using Distributed Summary Synthesis,"RQ1: Distribution of Work Load to Processing Units. Is the approach of distributed summary synthesis effective in distributing the verification work to different threads? Evaluation Plan: We compare the CPU-time consumption of DSS with its response time, using 1, 2, 4, and 8 processing units. 
RQ2: Reduction of Response Time. Does using more processing units lead to a significant reduction of the response time when using distributed summary synthesis? Evaluation Plan: We compare the response time of DSS using 1, 2, 4, and 8 processing units. 
RQ3: Outperform Predicate Abstraction on Some Programs. Is the new approach able to outperform a 15-years highly-tuned approach on appropriate verification tasks? Evaluation Plan: We compare DSS with 8 processing units to a standard single-threaded predicate abstraction. We select a few verification tasks which employ a sufficient number of workers and block size to see whether we can outperform this state-of-the-art algorithm. 
RQ4: ComplementState-of-the-Art Tools. Is the new approach already able to complement state-of-the-art approaches? Evaluation Plan: We compare DSS to the state-of-the-art approaches IMC [24, 59] and kInduction, both implemented in CPAchecker [45]. ",,,"Dirk Beyer, Matthias Kettl, Thomas Lemberger",No URL available
Evolution,Evaluation,0,0,,TRUE,B8,Only diff is Not Enough: Generating Commit Messages Leveraging Reasoning and Action of Large Language Model,"RQ1: What expectations do software practitioners have for commit message quality in addition to What and Why information?
RQ2: HowdoesOMG performcomparedtothe state-of-the-art CMG technique? 
RQ3: HowdoReActpromptingstrategy and our tool module that collects a broad range of context contribute to the overall e ectiveness?",,,"Jiawei Li, David Faragó, Christian Petrov, Iftekhar Ahmed",No URL available
Evolution,,,,,TRUE,-,Sibyl: Improving Software Engineering Tools with SMT Selection,,bereits gelabelt,,"Will Leeson, Matthew B Dwyer, Antonio Filieri",No URL available
Evolution,,,,,TRUE,-,HyperAST: Enabling Efficient Analysis of Software Histories at Scale,,bereits gelabelt,,"Quentin Le-dilavrec, Djamel Eddine Khelladi, Arnaud Blouin, Jean-Marc Jézéquel",No URL available
Evolution,,,,,FALSE,-,On Using GUI Interaction Data to Improve Text Retrieval-based Bug Localization,,bereits gelabelt,,"Junayed Mahmud, Nadeeshan De Silva, Safwat Ali Khan, Seyed Hooman Mostafavi, S M Hasan Mansur, Oscar Chaparro, Andrian (Andi) Marcus, Kevin Moran",No URL available
Evolution,Evaluation,0,0,,FALSE,B8,UpCy: Safely Updating Outdated Dependencies,"RQ1: How often do
na¨ıve updates fail due to source code, binary or semantic
incompatibilities?
RQ2:
How many compatibilities does an update has to fulfill
(source code, binary, semantic, conflict, duplicate, and
blossom)?
RQ3: In how many cases does UPCY minimize the number
of incompatibilities compared to a na¨ıve update?",,,"Andreas Dann, Ben Hermann, Eric Bodden",No URL available
Evolution,Evaluation,0,0,,FALSE,B8,OSSFP: Precise and Scalable C/C++ Third-Party Library Detection using Fingerprinting Functions,"RQ1: What is the accuracy of OSSFP in detecting TPLs
compared to related works?
• RQ2: How is the scalability of OSSFP in terms of time
efficiency and data size?
• RQ3: How does each function filtering step contribute to
the accuracy improvement of OSSFP?",,,"Wu Jiahui, Zhengzi Xu, Wei Tang, Lyuye Zhang, Yueming Wu, Chengyue Liu, Kairan Sun, Lida Zhao, Yang Liu",No URL available
Requirements and modeling,,,,,TRUE,-,Compiler Testing using Template Java Programs,,bereits gelabelt,,"Zhiqiang Zang, Nathan Wiatrek, Milos Gligoric, August Shi",No URL available
Requirements and modeling,,,,,TRUE,-,Analyzing and Debugging Normative Requirements via Satisfiability Checking,,bereits gelabelt,,"Nick Feng, Lina Marsso, Sinem Getir Yaman, Yesugen Baatartogtokh, Reem Ayad, Victória Oldemburgo de Mello, Beverley Townsend, Isobel Standen, Ioannis Stefanakos, Calum Imrie, Genaína Nunes Rodrigues, Ana Cavalcanti, Radu Calinescu, Marsha Chechik",No URL available
Requirements and modeling,,,,,TRUE,-,Detecting Smart Home Automation Application Interferences with Domain Knowledge,,bereits gelabelt,,"Tao Wang, Wei Chen, Liwei Liu, Guoquan Wu, Jun Wei, Tao Huang",No URL available
Requirements and modeling,Evaluation,0,1,,FALSE,-,SmartCoCo: Checking Comment-code Inconsistency in Smart Contracts via Constraint Propagation and Binding,"RQ1: What is the prevalence of security-related
comment-code inconsistencies in smart contracts?
• RQ2: What is the effectiveness of SmartCoCo in detecting comment-code inconsistencies?
• RQ3: What is the performance in checking a smart
contract with proposed constraints?
• RQ4: Can large language models check CCIs identified
by SmartCoCo?",,,"Sicheng Hao, Yuhong Nan, Zibin Zheng, Xiaohui Liu",No URL available
Requirements and modeling,,,,,FALSE,-,TRIAD: Automated Traceability Recovery based on Biterm-enhanced Deduction of Transitive Links among Artifacts,,bereits gelabelt,,"Hui Gao, Hongyu Kuang, Wesley Assunção, Christoph Mayr-Dorn, Guoping Rong, He Zhang, Xiaoxing Ma, Alexander Egyed",No URL available
Requirements and modeling,Knowledge-seeking,0,0,,FALSE,B9,Testability Refactoring in Pull Requests: Patterns and Trends,"RQ1: Are there particular atomic refactorings trends that
characterize Test-Pairs PRs?
• RQ2: What recurrent higher-level refactoring patterns do
developers perform for the goal of improving testability?
• RQ3: How prevalent are testability refactoring patterns
and what characterizes the corresponding code changes?",,,"Pavel Reich, Walid Maalej",No URL available
Human and social aspects,Knowledge-seeking,0,0,,TRUE,B11,“STILL AROUND”: Experiences and Survival Strategies of Veteran Women Software Developers,"RQ1. What age- and gender-specific experiences have
veteran software developers of marginalized genders had
in their careers?
• RQ2. What strategies have veteran software developers
of marginalized genders adopted that they perceive as
contributing to their survival in software engineering?",,,"Sterre van Breukelen, Ann Barcomb, Sebastian Baltes, Alexander Serebrenik",No URL available
Human and social aspects,,,,,TRUE,-,A Longitudinal Study of Student Contributions to OSS vs. OSS4SG with a Lightweight Intervention,,bereits gelabelt,,"Zihan Fang, Madeline Endres, Thomas Zimmermann, Denae Ford, Westley Weimer, Kevin Leach, Yu Huang",No URL available
Human and social aspects,,,,,TRUE,-,Property-Based Testing in Practice,,bereits gelabelt,,"Harrison Goldstein, Joseph W. Cutler, Daniel Dickstein, Benjamin C. Pierce, Andrew Head",No URL available
Human and social aspects,Evaluation,0,0,,FALSE,B12,"Semi-Automatic, Inline and Collaborative Web Page Code Curations","RQ1: Can our approach help developers identify and curate relevant implicit links between web pages and specific source code locations? 
RQ2: Can developers successfully leverage previouslycurated links on their own change tasks?",,,"Roy Rutishauser, André N. Meyer, Reid Holmes, Thomas Fritz",No URL available
Human and social aspects,Evaluation,0,0,,FALSE,B12,"AI-assisted Code Authoring at Scale: Fine-tuning, deploying, and mixed methods evaluation","RQ1. Model Evaluation: How well does CodeCompose generate one hidden line of code from existing code snippets?
RQ2. Adoption: How many suggestions are accepted by engineers and what proportion of the code is written by CodeCompose?
RQ3. Developer Feedback: How do developers perceive CodeCompose in their daily work?",,,"Vijayaraghavan Murali, Chandra Sekhar Maddila, Imad Ahmad, Michael Bolin, Daniel Cheng, Negar Ghorbani, Renuka Fernandez, Nachiappan Nagappan, Peter C Rigby",No URL available
Human and social aspects,Knowledge-seeking,0,0,,FALSE,B11,"""We Feel Like We're Winging It"": A Study on Navigating Open-Source Dependency Abandonment","RQ1 Howdodevelopers prepare for the risk of open-source dependency abandonment? 
RQ2 Howdodevelopers deal with open-source dependency abandonment, once it occurs?",,,"Courtney Miller, Christian Kästner, Bogdan Vasilescu",No URL available
Dependability and Security,,,,,TRUE,-,Static Application Security Testing (SAST) Tools for Smart Contracts: How Far Are We?,,bereits gelabelt,,"Kaixuan Li, Yue Xue, Sen Chen, Han Liu, Kairan Sun, Ming Hu, Haijun Wang, Yang Liu, Yixiang Chen",No URL available
Dependability and Security,,,,,TRUE,-,Attention! Your Copied Data is Under Monitoring: A Systematic Study of Clipboard Usage in Android Apps,,keine klaren RQs,,"Yongliang Chen, Ruoqin Tang, Chaoshun Zuo, Xiaokuan Zhang, Lei Xue, Xiapu Luo, Qingchuan Zhao",No URL available
Dependability and Security,,,,,TRUE,-,Compatible Remediation on Vulnerabilities from Third-Party Libraries for Java Projects,,bereits gelabelt,,"Lyuye Zhang, Chengwei Liu, Zhengzi Xu, Sen Chen, Lingling Fan, Lida Zhao, Wu Jiahui, Yang Liu",No URL available
Dependability and Security,Evaluation,-1,0,,FALSE,B14,Silent Vulnerable Dependency Alert Prediction with Vulnerability Key Aspect Explanation,"• RQ1: How is the accuracy of silent dependency alert classification?
• RQ2: How is the accuracy of explainable vulnerability key
aspect generation?
• RQ3: How useful is our explainable silent dependency alert
prediction compared with only binary patch classification?",,,"Jiamou Sun, Zhenchang Xing, Qinghua Lu, Xiwei (Sherry) Xu, Liming Zhu, Thong Hoang, Dehai Zhao",No URL available
Dependability and Security,,,,,FALSE,-,An Empirical Study of Data Disruption by Ransomware Attacks,keine RQs definiert,,,"Yiwei Hou, Lihua Guo, Chijin Zhou, Yiwen Xu, Zijing Yin, Shanshan Li, Chengnian Sun, Yu Jiang",No URL available
Dependability and Security,Evaluation,-1,1,,FALSE,-,TAINTMINI: Detecting Flow of Sensitive Data in Mini-Programs with Static Taint Analysis,"RQ1. Does TAINTMINI have any False Positive (FP) and
False Negative (FN)?
RQ2. How long does TAINTMINI take to analyze a miniprogram on average?
RQ3. What are those mini-programs that contain flowsensitive data?
RQ4. What is the data that may be leaked through those
mini-programs that contain sensitive data flow?",,,"Chao Wang, Ronny Ko, Yue Zhang, Yuqing Yang, Zhiqiang Lin",No URL available